const axios = require("axios");

/**
 * Send WhatsApp notification to admin using Twilio WhatsApp API
 * @param {Object} orderData - Order details
 */
const sendWhatsAppNotification = async (orderData) => {
  try {
    // Check if Twilio credentials are configured
    if (!process.env.TWILIO_ACCOUNT_SID || !process.env.TWILIO_AUTH_TOKEN) {
      console.log(
        "‚ö†Ô∏è Twilio credentials not configured, skipping WhatsApp notification"
      );
      return { success: false, error: "Twilio credentials not configured" };
    }

    const message = generateWhatsAppMessage(orderData);
    const adminWhatsApp =
      process.env.ADMIN_WHATSAPP ||
      process.env.WHATSAPP_NUMBER ||
      "923259327819";

    console.log(
      `üì± Sending WhatsApp to: +${adminWhatsApp.replace(/[^0-9]/g, "")}`
    );

    const response = await axios.post(
      `https://api.twilio.com/2010-04-01/Accounts/${process.env.TWILIO_ACCOUNT_SID}/Messages.json`,
      new URLSearchParams({
        From: `whatsapp:${
          process.env.TWILIO_WHATSAPP_NUMBER || "+14155238886"
        }`, // Twilio WhatsApp number
        To: `whatsapp:+${adminWhatsApp.replace(/[^0-9]/g, "")}`, // Your business WhatsApp
        Body: message,
      }),
      {
        auth: {
          username: process.env.TWILIO_ACCOUNT_SID,
          password: process.env.TWILIO_AUTH_TOKEN,
        },
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
      }
    );

    console.log(
      "‚úÖ WhatsApp notification sent successfully:",
      response.data.sid
    );
    return { success: true, sid: response.data.sid };
  } catch (error) {
    console.error(
      "‚ùå Error sending WhatsApp notification:",
      error.response?.data || error.message
    );

    // Check for specific Twilio error codes
    const errorCode = error.response?.data?.code;
    const errorMessage = error.response?.data?.message;

    if (errorCode === 63015) {
      console.error(
        "üö® Twilio Trial Account Restriction: Your admin WhatsApp number needs to be verified in Twilio Console"
      );
      console.error(
        "üìù Fix: Go to https://console.twilio.com/ and verify +923259327819"
      );
      console.error(
        "üí° Alternative: Upgrade to paid Twilio account or use CallMeBot fallback"
      );
    }

    return {
      success: false,
      error: error.response?.data || error.message,
      errorCode,
    };
  }
};

/**
 * Generate WhatsApp message content for order notification
 * @param {Object} orderData - Order details
 */
const generateWhatsAppMessage = (orderData) => {
  const {
    customerInfo,
    items,
    totalAmount,
    orderNumber,
    createdAt,
    paymentMethod,
    orderNotes,
  } = orderData;

  let message = `üö® *NEW ORDER ALERT* üö®\n\n`;
  message += `üìã *Order #${orderNumber}*\n`;
  message += `üìÖ ${new Date(createdAt).toLocaleDateString("en-PK", {
    timeZone: "Asia/Karachi",
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  })}\n\n`;

  message += `üë§ *CUSTOMER DETAILS:*\n`;
  message += `‚Ä¢ Name: ${customerInfo.name || customerInfo.fullName}\n`;
  message += `‚Ä¢ Phone: ${customerInfo.mobile || customerInfo.phoneNumber}\n`;
  message += `‚Ä¢ WhatsApp: ${
    customerInfo.whatsapp || customerInfo.whatsappNumber || customerInfo.mobile
  }\n`;
  if (customerInfo.email) {
    message += `‚Ä¢ Email: ${customerInfo.email}\n`;
  }
  message += `‚Ä¢ Address: ${customerInfo.shippingAddress}\n\n`;

  if (customerInfo.specialNotes) {
    message += `üìù *Special Notes:* ${customerInfo.specialNotes}\n\n`;
  }

  message += `üõçÔ∏è *ORDER ITEMS (${items.length} item${
    items.length > 1 ? "s" : ""
  }):*\n`;
  items.forEach((item, index) => {
    message += `${index + 1}. *${item.name}*\n`;
    message += `   ‚Ä¢ Qty: ${item.quantity}\n`;
    message += `   ‚Ä¢ Price: PKR ${item.price.toLocaleString()}\n`;
    if (item.selectedVariant) {
      message += `   ‚Ä¢ Variant: ${item.selectedVariant}\n`;
    }
    message += `   ‚Ä¢ Subtotal: PKR ${(
      item.price * item.quantity
    ).toLocaleString()}\n\n`;
  });

  message += `üí∞ *TOTAL: PKR ${totalAmount.toLocaleString()}*\n`;
  message += `üí≥ Payment: ${paymentMethod || "WhatsApp"}\n\n`;

  if (orderNotes) {
    message += `üìã *Order Notes:* ${orderNotes}\n\n`;
  }

  message += `‚ö° *ACTIONS NEEDED:*\n`;
  message += `‚úÖ Confirm stock\n`;
  message += `üìû Contact customer\n`;
  message += `üì¶ Prepare items\n`;
  message += `üöö Arrange delivery\n\n`;

  message += `üîó View: ${process.env.FRONTEND_URL}/admin/orders/${orderData._id}\n\n`;
  message += `_Generated by Solar Express System_`;

  return message;
};

/**
 * Send WhatsApp notification using CallMeBot API (Primary method)
 * @param {Object} orderData - Order details
 */
const sendWhatsAppViaCallMeBot = async (orderData) => {
  try {
    // Check if CallMeBot API key is configured
    if (!process.env.CALLMEBOT_API_KEY) {
      console.log("‚ùå CallMeBot API key not configured");
      console.log("üìù Setup instructions:");
      console.log("1. Add +34 644 84 71 89 to WhatsApp contacts");
      console.log(
        "2. Send 'I allow callmebot to send me messages' to that number"
      );
      console.log(
        "3. Add the received API key to your .env file as CALLMEBOT_API_KEY"
      );
      return { success: false, error: "CallMeBot API key not configured" };
    }

    const message = generateWhatsAppMessage(orderData);
    const adminPhone = process.env.ADMIN_WHATSAPP || "923259327819";

    // Clean phone number (remove any non-numeric characters except +)
    const cleanPhone = adminPhone.replace(/[^0-9]/g, "");

    console.log(`üì± Sending WhatsApp via CallMeBot to: +${cleanPhone}`);
    console.log(
      `üîë Using API key: ${process.env.CALLMEBOT_API_KEY.substring(0, 6)}...`
    );

    const response = await axios.get(`https://api.callmebot.com/whatsapp.php`, {
      params: {
        phone: cleanPhone,
        text: message,
        apikey: process.env.CALLMEBOT_API_KEY,
      },
      timeout: 10000, // 10 second timeout
    });

    console.log("‚úÖ WhatsApp sent via CallMeBot successfully!");
    console.log("üìä Response:", response.data);

    return {
      success: true,
      response: response.data,
      method: "CallMeBot",
    };
  } catch (error) {
    console.error("‚ùå CallMeBot WhatsApp error:", error.message);

    if (error.response) {
      console.error("üìä Response status:", error.response.status);
      console.error("üìä Response data:", error.response.data);
    }

    return {
      success: false,
      error: error.message,
      method: "CallMeBot",
    };
  }
};

/**
 * Send WhatsApp notification with Twilio as primary method
 * @param {Object} orderData - Order details
 */
const sendOrderWhatsAppNotification = async (orderData) => {
  console.log("üì± Starting WhatsApp notification process...");

  // Try Twilio first (primary method)
  console.log("üöÄ Trying Twilio (Primary method)...");
  const twilioResult = await sendWhatsAppNotification(orderData);

  if (twilioResult.success) {
    console.log("‚úÖ WhatsApp notification sent successfully via Twilio!");
    return twilioResult;
  }

  console.log("‚ö†Ô∏è Twilio failed, trying CallMeBot as fallback...");
  console.log("Twilio error details:", twilioResult.error);

  // Fallback to CallMeBot if Twilio fails
  const callmebotResult = await sendWhatsAppViaCallMeBot(orderData);

  if (callmebotResult.success) {
    console.log("‚úÖ WhatsApp notification sent successfully via CallMeBot!");
    return callmebotResult;
  }

  // Both methods failed
  console.error("‚ùå All WhatsApp notification methods failed!");
  console.error("Twilio error:", twilioResult.error);
  console.error("CallMeBot error:", callmebotResult.error);

  return {
    success: false,
    error: "All WhatsApp methods failed",
    details: {
      twilio: twilioResult.error,
      callmebot: callmebotResult.error,
    },
  };
};

module.exports = {
  sendOrderWhatsAppNotification,
  sendWhatsAppNotification,
  sendWhatsAppViaCallMeBot,
  generateWhatsAppMessage,
};
